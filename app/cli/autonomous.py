# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""CLI commands for Autonomous Database setup and management."""

from __future__ import annotations

import getpass
import re
import secrets
import zipfile
from pathlib import Path
from typing import TYPE_CHECKING

import click
from litestar.cli._utils import LitestarGroup
from rich.console import Console
from rich.prompt import Confirm, Prompt

if TYPE_CHECKING:
    from litestar import Litestar

console = Console()


@click.group(cls=LitestarGroup, name="autonomous")
def autonomous_cli(app: Litestar) -> None:
    """Autonomous Database setup and management commands."""


def parse_tns_services(tnsnames_path: Path) -> list[str]:
    """Parse TNS service names from tnsnames.ora file."""
    if not tnsnames_path.exists():
        return []

    content = tnsnames_path.read_text()
    # Find all service names (lines that start with a word followed by =)
    services = re.findall(r"^([a-zA-Z0-9_]+)\s*=", content, re.MULTILINE)
    return services


def create_env_file(
    *,
    db_service: str,
    admin_password: str,
    wallet_password: str,
    wallet_location: str,
    project_id: str,
    api_key: str,
) -> None:
    """Create .env file with autonomous database configuration."""
    env_path = Path(".env")

    # Generate a secure secret key
    secret_key = secrets.token_hex(32)

    env_content = f"""# Autonomous Database Configuration
# Generated by: uv run app autonomous configure

# Database Connection
DATABASE_URL="oracle+oracledb://ADMIN:{admin_password}@{db_service}"
WALLET_PASSWORD="{wallet_password}"
WALLET_LOCATION="{wallet_location}"

# Google Cloud Platform
GOOGLE_PROJECT_ID={project_id}
GOOGLE_API_KEY={api_key}

# Application Settings
LITESTAR_DEBUG=true
LITESTAR_HOST=0.0.0.0
LITESTAR_PORT=5006
LITESTAR_GRANIAN_IN_SUBPROCESS=false
LITESTAR_GRANIAN_USE_LITESTAR_LOGGER=true
SECRET_KEY={secret_key}

# Optional: Logging
LOG_LEVEL=INFO
"""

    env_path.write_text(env_content)
    console.print(f"[green]✓[/green] Created {env_path}")


@autonomous_cli.command(name="configure")
def configure_autonomous(app: Litestar) -> None:
    """Interactive wizard to configure Autonomous Database connection."""
    console.print("\n[bold blue]═══ Autonomous Database Configuration Wizard ═══[/bold blue]\n")

    # Step 1: Wallet Discovery
    console.print("[cyan]Step 1: Wallet Discovery[/cyan]")
    home = Path.home()
    wallets = list(home.glob("Wallet*.zip"))

    wallet_path: Path
    if len(wallets) == 1:
        wallet_path = wallets[0]
        console.print(f"Found wallet: [green]{wallet_path}[/green]")
        if not Confirm.ask("Use this wallet?", default=True):
            wallet_path = Path(Prompt.ask("Enter wallet.zip path"))
    elif len(wallets) > 1:
        console.print("Found multiple wallet files:")
        for i, w in enumerate(wallets, 1):
            console.print(f"  {i}. {w}")
        choice = int(Prompt.ask(f"Select wallet (1-{len(wallets)})", default="1"))
        wallet_path = wallets[choice - 1]
    else:
        console.print("[yellow]No wallet files found in home directory[/yellow]")
        wallet_path = Path(Prompt.ask("Enter wallet.zip path"))

    if not wallet_path.exists():
        console.print(f"[red]✗[/red] Wallet file not found: {wallet_path}")
        raise click.Abort

    # Step 2: Extract Wallet
    console.print("\n[cyan]Step 2: Wallet Extraction[/cyan]")
    wallet_dir = home / "wallet"

    if not wallet_dir.exists():
        console.print(f"Creating wallet directory: [green]{wallet_dir}[/green]")
        wallet_dir.mkdir(parents=True, exist_ok=True)
        with zipfile.ZipFile(wallet_path) as zf:
            zf.extractall(wallet_dir)
        console.print("[green]✓[/green] Wallet extracted")
    else:
        console.print(f"Using existing wallet directory: [green]{wallet_dir}[/green]")

    # Comment out the first line of sqlnet.ora if needed (for local testing)
    sqlnet_ora = wallet_dir / "sqlnet.ora"
    if sqlnet_ora.exists():
        lines = sqlnet_ora.read_text().splitlines(True)
        if lines and not lines[0].strip().startswith("#"):
            lines[0] = "#" + lines[0]
            sqlnet_ora.write_text("".join(lines))

    # Step 3: Service Selection
    console.print("\n[cyan]Step 3: Database Service Selection[/cyan]")
    tnsnames = wallet_dir / "tnsnames.ora"
    services = parse_tns_services(tnsnames)

    if not services:
        console.print("[red]✗[/red] No services found in tnsnames.ora")
        raise click.Abort

    if len(services) == 1:
        db_service = services[0]
        console.print(f"Using service: [green]{db_service}[/green]")
    else:
        console.print("Available database services:")
        for i, svc in enumerate(services, 1):
            console.print(f"  {i}. {svc}")
        choice = int(Prompt.ask(f"Select service (1-{len(services)})", default="1"))
        db_service = services[choice - 1]

    # Step 4: Credentials
    console.print("\n[cyan]Step 4: Database Credentials[/cyan]")
    admin_password = getpass.getpass("ADMIN user password: ")
    wallet_password = getpass.getpass("Wallet password: ")

    # Step 5: Google Cloud Configuration
    console.print("\n[cyan]Step 5: Google Cloud Platform Configuration[/cyan]")
    console.print("\nTo find your Project ID:")
    console.print("  1. Go to: https://console.cloud.google.com/")
    console.print("  2. Click on the project name at the top")
    console.print("  3. Copy the ID (not the Name)")
    project_id = Prompt.ask("\nGoogle Cloud Project ID")

    console.print("\nTo create an API Key:")
    console.print("  1. Go to: https://console.cloud.google.com/apis/credentials")
    console.print("  2. Click '+ CREATE CREDENTIALS' → 'API key'")
    console.print("  3. (Recommended) Restrict the key to Vertex AI API")
    api_key = getpass.getpass("\nGoogle API Key: ")

    # Step 6: Generate Configuration
    console.print("\n[cyan]Step 6: Generating Configuration[/cyan]")
    create_env_file(
        db_service=db_service,
        admin_password=admin_password,
        wallet_password=wallet_password,
        wallet_location=str(wallet_dir),
        project_id=project_id,
        api_key=api_key,
    )

    console.print("\n[bold green]✓ Configuration complete![/bold green]")
    console.print("\n[yellow]Next steps:[/yellow]")
    console.print("  1. Run: [cyan]make install-autonomous[/cyan] (or [cyan]uv run app autonomous init-db[/cyan])")
    console.print("  2. Start the app: [cyan]uv run app run[/cyan]")
