<!DOCTYPE html>
<html class="h-full">

<head>
    <meta charset="utf-8" />
    <title inertia>Cymbal Coffee</title>
    <meta name="referrer" content="same-origin" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
    <link rel="apple-touch-icon" sizes="180x180" href="{{ url_for('static', file_path='apple-touch-icon.png') }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ url_for('static', file_path='favicon-32x32.png') }}">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ url_for('static', file_path='favicon-16x16.png') }}">
    <link rel="icon" type="image/x-icon" href="{{ url_for('static', file_path='favicon.ico') }}">
    <link rel="manifest" href="{{ url_for('static', file_path='site.webmanifest') }}">
    <link rel="mask-icon" href="{{ url_for('static', file_path='safari-pinned-tab.svg') }}" color="#5bbad5">
    <meta name="apple-mobile-web-app-title" content="Cymbal Coffee">
    <meta name="application-name" content="Cymbal Coffee">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">

    <!-- HTMX for real-time updates -->
    <script src="https://unpkg.com/htmx.org@1.9.10"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/sse.js"></script>

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        h1 {
            text-align: center;
        }

        :root {
            --coffee-dark: #3C2A21;
            --coffee-medium: #967259;
            --coffee-light: #D7B19D;
            --cream: #FFF3E4;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--cream);
            color: var(--coffee-dark);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .container {
            max-width: 1000px;
            width: 95%;
            margin: 20px auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .chat-section {
            display: flex;
            flex-direction: column;
            height: 600px;
        }

        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid var(--coffee-light);
        }

        .demo-personas {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .persona-btn {
            background-color: var(--coffee-light);
            color: var(--coffee-dark);
            border: none;
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .persona-btn:hover {
            background-color: var(--coffee-medium);
            color: white;
        }

        .chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            border: 2px solid var(--coffee-light);
            border-radius: 15px;
            background-color: var(--cream);
            margin-bottom: 20px;
        }

        /* Custom scrollbar styling */
        .chat-container::-webkit-scrollbar {
            width: 12px;
        }

        .chat-container::-webkit-scrollbar-track {
            background: var(--cream);
            border-radius: 10px;
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: var(--coffee-light);
            border-radius: 10px;
            border: 2px solid var(--cream);
        }

        .chat-container::-webkit-scrollbar-thumb:hover {
            background: var(--coffee-medium);
        }

        /* Firefox scrollbar styling */
        .chat-container {
            scrollbar-width: thin;
            scrollbar-color: var(--coffee-light) var(--cream);
        }

        .message {
            margin-bottom: 15px;
            padding: 12px 15px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message.user {
            background-color: var(--coffee-medium);
            color: white;
            margin-left: auto;
            text-align: right;
        }

        .message.assistant {
            background-color: white;
            color: var(--coffee-dark);
            border: 1px solid var(--coffee-light);
        }

        .typing-indicator {
            color: var(--coffee-medium);
            font-style: italic;
        }

        .chat-form {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-direction: row;
        }

        .chat-input {
            flex: 1;
            padding: 12px 15px;
            border: 2px solid var(--coffee-light);
            border-radius: 25px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .chat-input:focus {
            outline: none;
            border-color: var(--coffee-medium);
        }

        .send-btn {
            background-color: var(--coffee-medium);
            color: white;
            padding: 12px 16px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s ease;
            flex-shrink: 0;
            white-space: nowrap;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

        .send-btn:hover {
            background-color: var(--coffee-dark);
        }

        .send-btn:disabled {
            background-color: var(--coffee-light);
            cursor: not-allowed;
        }

        .metrics-panel {
            margin-top: 20px;
            padding: 15px;
            background-color: var(--cream);
            border-radius: 10px;
            border: 1px solid var(--coffee-light);
            min-height: 100px;
            transition: opacity 0.3s ease;
        }

        .metrics-panel.loading {
            opacity: 0.6;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
        }

        .metric-item {
            text-align: center;
            padding: 10px;
            background-color: white;
            border-radius: 8px;
            border: 1px solid var(--coffee-light);
        }

        .metric-value {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--coffee-medium);
        }

        .metric-label {
            font-size: 0.8rem;
            color: var(--coffee-dark);
        }

        h1 {
            text-align: center;
            color: var(--coffee-dark);
            font-size: 2.5rem;
            margin-bottom: 30px;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        form:not(.chat-form) {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        label {
            margin-bottom: 15px;
            font-weight: 600;
            color: var(--coffee-medium);
        }

        input[type="text"] {
            padding: 12px 15px;
            border: 2px solid var(--coffee-light);
            border-radius: 25px;
            width: 100%;
            max-width: 400px;
            box-sizing: border-box;
            margin-bottom: 20px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: var(--coffee-medium);
        }

        input[type="submit"] {
            background-color: var(--coffee-medium);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: background-color 0.3s ease;
        }

        input[type="submit"]:hover {
            background-color: var(--coffee-dark);
        }

        .output-container {
            margin-top: 30px;
            padding: 20px;
            border: 2px solid var(--coffee-light);
            border-radius: 15px;
            background-color: var(--cream);
        }

        .output-container h2 {
            color: var(--coffee-dark);
            margin-bottom: 15px;
        }


        @media (max-width: 600px) {
            .container {
                padding: 20px;
            }

            h1 {
                font-size: 2rem;
            }

            input[type="text"],
            input[type="submit"] {
                font-size: 0.9rem;
            }
        }
    </style>

</head>

<body class="font-sans antialiased h-full">
    <div class="container">
        <!-- Header -->
        <div style="display: grid; grid-template-columns: 1fr 2fr 1fr; align-items: start; margin-bottom: 30px;">
            <div>
                <img src="{{ url_for('static', file_path='cymbal-orig.jpg') }}" alt="Coffee Connoisseur"
                    style="max-height: 100px;">
                <p style="color: var(--coffee-medium); margin-top: 10px; margin-bottom: 0; white-space: nowrap; font-size: 1.1rem;">Powered by Oracle 23AI + Google Vertex AI</p>
            </div>
            <div style="text-align: center;">
                <h1 style="margin: 0; font-size: 3.5rem; font-weight: 400; letter-spacing: 3px; color: var(--coffee-dark);">Connoisseur</h1>
            </div>
            <div></div> <!-- Empty cell for balance -->
        </div>

        <!-- Chat Section -->
        <div class="chat-section">
            <!-- Chat Header with Demo Personas -->
            <div class="chat-header">
                <h3 style="margin: 0; color: var(--coffee-dark);">Chat with AI Coffee Expert</h3>
                <div class="demo-personas">
                    <button class="persona-btn" onclick="setPersona('novice')">☕ Coffee Novice</button>
                    <button class="persona-btn" onclick="setPersona('enthusiast')">🏆 Coffee Enthusiast</button>
                    <button class="persona-btn" onclick="setPersona('expert')">👨‍🍳 Coffee Expert</button>
                    <button class="persona-btn" onclick="setPersona('barista')">☕ Professional Barista</button>
                </div>
            </div>

            <!-- Chat Container -->
            <div id="chat-container" class="chat-container">
                <div class="message assistant">
                    <strong>AI Coffee Expert:</strong> Hello! I'm your personal coffee expert powered by Oracle 23AI and
                    Google Vertex AI.
                    Ask me about coffee recommendations, brewing methods, or help finding the perfect coffee near you!
                    Try saying something like "I want a mild, sweet coffee" or "What's the best espresso?"
                </div>
                <!-- Messages will be added here via HTMX -->
            </div>

            <!-- Chat Form -->
            <form class="chat-form" hx-post="{{ url_for('coffee_chat.get') }}" hx-target="#chat-container"
                hx-swap="beforeend" hx-indicator="#loading">
                {{ csrf_input | safe }}
                <input type="hidden" id="persona" name="persona" value="enthusiast">
                <input class="chat-input" id="message" name="message" placeholder="Ask me about coffee..." required
                    autocomplete="off">
                <button type="submit" class="send-btn" id="send-btn">
                    <span id="loading" class="htmx-indicator">Thinking...</span>
                    <span id="send-text">Send ☕</span>
                </button>
            </form>
        </div>

        <!-- Performance Metrics Panel -->
        <div class="metrics-panel loading" id="metrics-panel">
            <h4 style="margin-top: 0; color: var(--coffee-dark);">Performance Metrics</h4>
            <div class="metrics-grid" id="metrics-grid">
                <div style="grid-column: 1 / -1; text-align: center; color: var(--coffee-medium);">
                    <div class="typing-indicator">Loading metrics...</div>
                </div>
            </div>
        </div>

    </div>

    <!-- JavaScript for interactivity -->
    <script>
        // Demo persona management
        let currentPersona = 'enthusiast';

        function setPersona(persona) {
            currentPersona = persona;
            document.getElementById('persona').value = persona;

            // Update UI to show active persona
            document.querySelectorAll('.persona-btn').forEach(btn => {
                btn.style.backgroundColor = 'var(--coffee-light)';
                btn.style.color = 'var(--coffee-dark)';
            });
            event.target.style.backgroundColor = 'var(--coffee-medium)';
            event.target.style.color = 'white';

            // Add persona message to chat
            const personaMessages = {
                'novice': "I'm new to coffee. Please explain things simply and recommend beginner-friendly options.",
                'enthusiast': "I enjoy good coffee and want to learn more about different beans and brewing methods.",
                'expert': "I'm a coffee connoisseur. I want detailed information about origins, processing, and tasting notes.",
                'barista': "I'm a professional barista looking for technical brewing advice and commercial insights."
            };

            addSystemMessage(`Persona set to: ${persona.charAt(0).toUpperCase() + persona.slice(1)}. ${personaMessages[persona]}`);
        }

        function addSystemMessage(message) {
            const chatContainer = document.getElementById('chat-container');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message assistant';
            messageDiv.innerHTML = `<strong>System:</strong> ${message}`;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Auto-scroll chat to bottom
        function scrollChatToBottom() {
            const chatContainer = document.getElementById('chat-container');
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // HTMX event listeners
        document.body.addEventListener('htmx:afterRequest', function (evt) {
            scrollChatToBottom();

            // Reset form
            if (evt.detail.elt.classList.contains('chat-form') || evt.detail.elt.closest('.chat-form')) {
                document.getElementById('message').value = '';
                document.getElementById('message').focus();
            }
        });

        // Load metrics on page load
        document.addEventListener('DOMContentLoaded', function () {
            // Load metrics immediately
            loadMetrics();
        });

        function loadMetrics() {
            const metricsPanel = document.getElementById('metrics-panel');
            const metricsGrid = document.getElementById('metrics-grid');

            fetch('/metrics', {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.json())
                .then(data => {
                    metricsGrid.innerHTML = `
                        <div class="metric-item">
                            <div class="metric-value">${data.total_searches || 0}</div>
                            <div class="metric-label">Total Searches</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${Math.round(data.avg_search_time_ms || 0)}ms</div>
                            <div class="metric-label">Avg Response Time</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${Math.round(data.avg_oracle_time_ms || 0)}ms</div>
                            <div class="metric-label">Oracle Vector Time</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${(data.avg_similarity_score || 0).toFixed(2)}</div>
                            <div class="metric-label">Avg Similarity</div>
                        </div>
                    `;
                    // Remove loading class after data is loaded
                    metricsPanel.classList.remove('loading');
                })
                .catch(err => {
                    console.log('Metrics not available:', err);
                    metricsGrid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; color: var(--coffee-medium);">
                            <small>Metrics will appear after first search</small>
                        </div>
                    `;
                    metricsPanel.classList.remove('loading');
                });
        }

        // Refresh metrics every 30 seconds
        setInterval(loadMetrics, 30000);
    </script>
</body>

</html>
