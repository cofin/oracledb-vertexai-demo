<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Performance Dashboard - Cymbal Coffee</title>

    <!-- Chart.js for visualizations -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1"></script>

    <!-- HTMX for real-time updates -->
    <script src="https://unpkg.com/htmx.org@1.9.10"></script>

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">

    <style>
        :root {
            --coffee-dark: #3C2A21;
            --coffee-medium: #967259;
            --coffee-light: #D7B19D;
            --cream: #FFF3E4;
            --success: #27ae60;
            --warning: #f39c12;
            --danger: #e74c3c;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--cream);
            color: var(--coffee-dark);
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }

        .dashboard-header {
            background-color: var(--coffee-dark);
            color: white;
            padding: 20px;
            text-align: center;
        }

        .dashboard-header h1 {
            margin: 0;
            font-size: 2rem;
        }

        .dashboard-header p {
            margin: 5px 0 0 0;
            opacity: 0.8;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 20px auto;
            padding: 0 20px;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }

        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--coffee-medium);
        }

        .metric-card.success::before { background: var(--success); }
        .metric-card.warning::before { background: var(--warning); }
        .metric-card.danger::before { background: var(--danger); }

        .metric-value {
            font-size: 2.5rem;
            font-weight: 600;
            color: var(--coffee-medium);
            margin: 10px 0;
        }

        .metric-label {
            font-size: 0.9rem;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .metric-trend {
            font-size: 0.8rem;
            margin-top: 10px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .trend-up { color: var(--success); }
        .trend-down { color: var(--danger); }
        .trend-neutral { color: #666; }

        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .chart-container h3 {
            margin-top: 0;
            color: var(--coffee-dark);
            border-bottom: 2px solid var(--coffee-light);
            padding-bottom: 10px;
        }

        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
        }

        .refresh-info {
            text-align: center;
            color: #666;
            font-size: 0.9rem;
            margin-top: 20px;
        }

        .loading-indicator {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid var(--coffee-light);
            border-top-color: var(--coffee-medium);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .vector-demo {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }

        .vector-input {
            width: 100%;
            padding: 10px;
            border: 2px solid var(--coffee-light);
            border-radius: 5px;
            font-size: 1rem;
            margin-bottom: 10px;
        }

        .vector-results {
            margin-top: 20px;
        }

        .similarity-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid var(--coffee-light);
        }

        .similarity-score {
            background: var(--coffee-medium);
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-header">
        <h1>üéØ Performance Dashboard</h1>
        <p>Oracle 23AI + Google Vertex AI Real-time Metrics</p>
    </div>

    <div class="dashboard-container">
        <!-- Key Metrics Cards -->
        <div class="metrics-grid"
             hx-get="/api/metrics/summary"
             hx-trigger="load, every 10s"
             hx-swap="innerHTML">
            <!-- Loading state -->
            <div class="metric-card">
                <div class="metric-label">Total Searches</div>
                <div class="metric-value">
                    <span class="loading-indicator"></span>
                </div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Avg Response Time</div>
                <div class="metric-value">
                    <span class="loading-indicator"></span>
                </div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Oracle Vector Time</div>
                <div class="metric-value">
                    <span class="loading-indicator"></span>
                </div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Cache Hit Rate</div>
                <div class="metric-value">
                    <span class="loading-indicator"></span>
                </div>
            </div>
        </div>

        <!-- Charts -->
        <div class="charts-grid">
            <!-- Response Time Chart -->
            <div class="chart-container">
                <h3>Response Time Trends (Last 24 Hours)</h3>
                <canvas id="responseTimeChart"></canvas>
            </div>

            <!-- Vector Search Performance -->
            <div class="chart-container">
                <h3>Vector Search Performance</h3>
                <canvas id="vectorPerformanceChart"></canvas>
            </div>
        </div>

        <!-- Detailed Metrics -->
        <div class="chart-container">
            <h3>System Performance Breakdown</h3>
            <canvas id="performanceBreakdownChart" style="max-height: 300px;"></canvas>
        </div>

        <!-- Vector Search Demo -->
        <div class="vector-demo">
            <h3>üîç Vector Search Demonstration</h3>
            <p>Try searching for coffee products using natural language:</p>

            <form hx-post="/api/vector-demo"
                  hx-target="#vector-results"
                  hx-indicator="#vector-loading">
                {{ csrf_input | safe }}
                <input type="text"
                       name="query"
                       class="vector-input"
                       placeholder="e.g., 'fruity coffee with chocolate notes'"
                       required>
                <button type="submit" style="padding: 10px 20px; background: var(--coffee-medium); color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Search Products
                    <span id="vector-loading" class="htmx-indicator" style="margin-left: 10px;">
                        <span class="loading-indicator"></span>
                    </span>
                </button>
            </form>

            <div id="vector-results" class="vector-results">
                <!-- Results will appear here -->
            </div>
        </div>

        <div class="refresh-info">
            Dashboard updates automatically every 10 seconds
        </div>
    </div>

    <script>
        // Chart.js configuration
        const chartColors = {
            primary: '#967259',
            secondary: '#D7B19D',
            success: '#27ae60',
            warning: '#f39c12',
            danger: '#e74c3c',
            dark: '#3C2A21'
        };

        // Response Time Chart
        let responseTimeChart;

        // Vector Performance Chart
        let vectorPerformanceChart;

        // Performance Breakdown Chart
        let performanceBreakdownChart;

        // Initialize charts when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            loadChartData();
        });

        function initializeCharts() {
            // Response Time Chart
            const rtCtx = document.getElementById('responseTimeChart').getContext('2d');
            responseTimeChart = new Chart(rtCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Total Response Time',
                        data: [],
                        borderColor: chartColors.primary,
                        backgroundColor: chartColors.primary + '20',
                        tension: 0.4
                    }, {
                        label: 'Oracle Time',
                        data: [],
                        borderColor: chartColors.secondary,
                        backgroundColor: chartColors.secondary + '20',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Time (ms)'
                            }
                        }
                    }
                }
            });

            // Vector Performance Chart
            const vpCtx = document.getElementById('vectorPerformanceChart').getContext('2d');
            vectorPerformanceChart = new Chart(vpCtx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'Query Performance',
                        data: [],
                        backgroundColor: chartColors.primary,
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Similarity Score'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Response Time (ms)'
                            }
                        }
                    }
                }
            });

            // Performance Breakdown Chart
            const pbCtx = document.getElementById('performanceBreakdownChart').getContext('2d');
            performanceBreakdownChart = new Chart(pbCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Embedding Generation', 'Vector Search', 'AI Processing', 'Other'],
                    datasets: [{
                        data: [0, 0, 0, 0],
                        backgroundColor: [
                            chartColors.primary,
                            chartColors.secondary,
                            chartColors.success,
                            chartColors.warning
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        }
                    }
                }
            });
        }

        function loadChartData() {
            // Fetch and update chart data
            fetch('/api/metrics/charts')
                .then(response => response.json())
                .then(data => {
                    updateCharts(data);
                })
                .catch(err => console.error('Error loading chart data:', err));
        }

        function updateCharts(data) {
            // Update Response Time Chart
            if (data.responseTime) {
                responseTimeChart.data.labels = data.responseTime.labels;
                responseTimeChart.data.datasets[0].data = data.responseTime.total;
                responseTimeChart.data.datasets[1].data = data.responseTime.oracle;
                responseTimeChart.update();
            }

            // Update Vector Performance Chart
            if (data.vectorPerformance) {
                vectorPerformanceChart.data.datasets[0].data = data.vectorPerformance;
                vectorPerformanceChart.update();
            }

            // Update Performance Breakdown
            if (data.breakdown) {
                performanceBreakdownChart.data.datasets[0].data = data.breakdown;
                performanceBreakdownChart.update();
            }
        }

        // Refresh charts every 30 seconds
        setInterval(loadChartData, 30000);

        // HTMX event handlers
        document.body.addEventListener('htmx:afterRequest', function(evt) {
            // Handle vector search results
            if (evt.detail.target.id === 'vector-results') {
                // Animate results appearance
                const results = evt.detail.target.querySelectorAll('.similarity-item');
                results.forEach((item, index) => {
                    item.style.opacity = '0';
                    item.style.transform = 'translateY(10px)';
                    setTimeout(() => {
                        item.style.transition = 'all 0.3s ease';
                        item.style.opacity = '1';
                        item.style.transform = 'translateY(0)';
                    }, index * 100);
                });
            }
        });
    </script>
</body>
</html>
