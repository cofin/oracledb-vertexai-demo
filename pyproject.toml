[project]
authors = [{ name = "Cody Fincher", email = "cody.fincher@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development",
    "Typing :: Typed",
]
dependencies = [
    "litestar[jinja,jwt,redis,cryptography,structlog,pydantic,sqlalchemy]",
    "litestar-oracledb>=0.2.0",
    "litestar-granian>=0.5.1",
    "litestar-vite[nodeenv]>=0.2.9",
    "python-dotenv>=1.0.1",
    "httptools",
    "langchain>=0.2.14",
    "langchain-google-vertexai>=1.0.10",
    "langchain-community>=0.2.15",
    "vertexai>=1.63.0",
    "numpy>=1.26.4",
    "prompt-toolkit>=3.0.47",
    # temporarily for messages
    "aiosqlite>=0.20.0",
]
description = "Reference application for Oracle 23AI and VertexAI integration."
keywords = ["litestar", "vertexai", "oracledb", "google"]
license = { text = "MIT" }
name = "app"
readme = "README.md"
requires-python = ">=3.11,<3.13"
version = "0.1.0"

[project.scripts]
app = "app.__init__:run_cli"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "nodeenv"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
dev-mode-dirs = ["./"]
include = ["CHANGELOG.md", "/public/**/*", "/app/**/*.sql", "/app/db/**/*.ini"]
packages = ["app"]

[tool.pdm.scripts]
lint = "pdm run pre-commit run --all-files"
# post_install = "pdm run python scripts/pre-build.py --install-packages"
# pre_build = "pdm run python scripts/pre-build.py --build-assets"
start-infra = "docker compose -f docker-compose.yml up --force-recreate -d"
stop-infra = "docker compose -f docker-compose.yml down --remove-orphans"
test = "pdm run pytest tests"
test_coverage = { composite = ["pdm run pytest tests", "pdm run coverage html", "pdm run coverage xml"] }

[tool.pdm.dev-dependencies]
dev = ["nodeenv"]
linting = ["pre-commit>=3.4.0", "mypy>=1.5.1", "ruff>=0.0.287", "types-click", "types-pyyaml", "types-redis"]
test = [
    "pytest",
    "pytest-xdist",
    "pytest-mock",
    "pytest-cov",
    "coverage",
    "pytest-sugar",
    "pytest-databases[oracle,redis]>=0.1.0",
]


[tool.coverage.report]
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    "if __name__ == .__main__.:",
    'def __repr__',
    'if self\.debug:',
    'if settings\.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
    'if 0:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["tests/*", "**/*/migrations/**/*.py", "scripts/*"]

[tool.pytest.ini_options]
addopts = ["-ra", "--ignore", "migrations"]
# env_files = [".env.testing"]
# env_override_existing_values = 1
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources",
    "ignore::DeprecationWarning:google.*",
    "ignore::DeprecationWarning:passlib.*",
    "ignore::DeprecationWarning:aiosql.*",
    "ignore::DeprecationWarning:litestar.constants.*",
    "ignore::DeprecationWarning:litestar.utils.*",
    "ignore::DeprecationWarning:litestar.cli.*",
    "ignore::DeprecationWarning:httpx._client",
]
testpaths = ["tests"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    '__pycache__',
    "app/db/migrations/versions/*.py",
]
fix = true
line-length = 120
lint.fixable = ["ALL"]
lint.ignore = [
    "E501",    # pycodestyle line too long, handled by black
    "D100",    # pydocstyle - missing docstring in public module
    "D101",    # pydocstyle - missing docstring in public class
    "D102",    # pydocstyle - missing docstring in public method
    "D103",    # pydocstyle - missing docstring in public function
    "D104",    # pydocstyle - missing docstring in public package
    "D105",    # pydocstyle - missing docstring in magic method
    "D106",    # pydocstyle - missing docstring in public nested class
    "D107",    # pydocstyle - missing docstring in __init__
    "D202",    # pydocstyle - no blank lines allowed after function docstring
    "D205",    # pydocstyle - 1 blank line required between summary line and description
    "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
    "UP037",   # pyupgrade - removes quotes from type annotation
    "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
    "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
    "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
    "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
    "ANN102",
    "ANN101",  # ruff - Missing type annotation for `self` in method
    "PLR0913", # ruff - Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "FBT001",  # Boolean typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean Boolean default positional argument in function definition
    "ARG002",  # Unused method argument
    "ARG001",  #  Unused function argument
    "TD002",
    "TD003",
    "FIX002",
    "PGH003",
    "RUF006",
    "SLF001",
    "PT007",
    'PT004',
    'PT005',
    'S603',
    "E501",    # pycodestyle line too long, handled by black
    "PLW2901", # pylint - for loop variable overwritten by assignment target
    "ANN401",
    "ANN102",
    "ANN101",
    "FBT",
    "PLR0913", # too many arguments
    "PT",
    "TD",
    "PERF203", # ignore for now; investigate
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["."]
target-version = "py311"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "sqlalchemy.ext.declarative.declared_attr",
    "sqlalchemy.orm.declared_attr.directive",
    "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.isort]
known-first-party = ['tests', 'app', 'config']

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']
"app/db/migrations/versions/*.py" = ["ANN201", "INP001"]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET", "E731", "RUF012", "FA100", "ARG001"]
"docs/conf.py" = ["FIX002", "ARG001", "INP001"]
"scripts/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP001"]
"scripts/*.py" = ["INP001", "ERA001"]
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog"
skip = 'pdm.lock, package-lock.json'

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
|^migrations/
)
'''
implicit_reexport = false
plugins = []
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = ["tests.*"]

[[tool.mypy.overrides]]
disallow_untyped_calls = false
disallow_untyped_decorators = false
module = ["aisoql.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "sqlalchemy.*",
    "saq.*",
    "uvicorn.*",
    "aiohttp.*",
    "jsbeautifier",
    "jsbeautifier.*",
    "uvloop",
    "uvloop.*",
    "nodeenv",
]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["app.db.migrations.*"]


[tool.pyright]
exclude = ["scripts", "docs"]
include = ["app", "tests"]
